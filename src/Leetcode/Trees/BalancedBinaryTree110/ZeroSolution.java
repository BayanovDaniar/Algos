package Leetcode.Trees.BalancedBinaryTree110;

import Leetcode.Trees.TreeNode;

public class ZeroSolution {
    public boolean isBalanced(TreeNode root) {
        // If the tree is empty, we can say it’s balanced...
        if (root == null)  return true;
        // Height Function will return -1, when it’s an unbalanced tree...
        return Height(root) != -1;
    }
    public int Height(TreeNode root) {
        // Base case...
        if (root == null)  return 0;
        // Height of left subtree...
        int leftHeight = Height(root.left);
        // Height of height subtree...
        int rightHeight = Height(root.right);
        // In case of left subtree or right subtree unbalanced, return -1...
        if (leftHeight == -1 || rightHeight == -1)  return -1;
        // If their heights differ by more than ‘1’, return -1...
        if (Math.abs(leftHeight - rightHeight) > 1)  return -1;
        // Otherwise, return the height of this subtree as max(leftHeight, rightHeight) + 1...
        return Math.max(leftHeight, rightHeight) + 1;
    }
}
